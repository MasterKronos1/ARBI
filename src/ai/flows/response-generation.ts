// This file is generated by Firebase Extensions.
'use server';
/**
 * @fileOverview This file defines the Genkit flow for generating responses based on user input and selected role context.
 *
 * - generateResponse - A function that combines user input with role context and generates a response using a language model.
 * - GenerateResponseInput - The input type for the generateResponse function, including user input and role.
 * - GenerateResponseOutput - The return type for the generateResponse function, containing the generated response.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

// Define the input schema
const GenerateResponseInputSchema = z.object({
  userInput: z.string().describe('The user input to be processed.'),
  roleContext: z.string().describe('The context of the selected role.'),
});
export type GenerateResponseInput = z.infer<typeof GenerateResponseInputSchema>;

// Define the output schema
const GenerateResponseOutputSchema = z.object({
  generatedResponse: z.string().describe('The generated response from the language model.'),
});
export type GenerateResponseOutput = z.infer<typeof GenerateResponseOutputSchema>;

// Define the tool
const contextualizePromptTool = ai.defineTool({
  name: 'contextualizePrompt',
  description: 'Enhances the user input with the context of the selected role.',
  inputSchema: z.object({
    userInput: z.string().describe('The user input to be processed.'),
    roleContext: z.string().describe('The context of the selected role.'),
  }),
  outputSchema: z.string(),
},
async (input) => {
  // Combine the user input with the role context.
  return `${input.roleContext}\n${input.userInput}`;
});

// Define the prompt
const generateResponsePrompt = ai.definePrompt({
  name: 'generateResponsePrompt',
  input: {schema: GenerateResponseInputSchema},
  output: {schema: GenerateResponseOutputSchema},
  prompt: `You are an AI assistant. Use the contextualizePrompt tool to get the contextualized user input. Generate a helpful and informative response based on the contextualized input.`, 
  tools: [contextualizePromptTool],
});

// Define the flow
const generateResponseFlow = ai.defineFlow(
  {
    name: 'generateResponseFlow',
    inputSchema: GenerateResponseInputSchema,
    outputSchema: GenerateResponseOutputSchema,
  },
  async input => {
    const {output} = await generateResponsePrompt(input);
    return output!;
  }
);

/**
 * Generates a response based on user input and role context.
 * @param input - The input containing user input and role context.
 * @returns The generated response.
 */
export async function generateResponse(input: GenerateResponseInput): Promise<GenerateResponseOutput> {
  return generateResponseFlow(input);
}
